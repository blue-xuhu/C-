题目：
输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串"I am a student. "，则输出"student. a am I"。

示例 1：

输入: "the sky is blue"
输出: "blue is sky the"
示例 2：

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：

输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

说明：

无空格字符构成一个单词。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。

解题思路：
  倒序遍历字符串，以字符为界限提取字符串，然后依次添加到结果目标字符串中，并以空格隔开，最终去除末尾的空格。
代码实现：
class Solution {
public:
    string reverseWords(string s) {
        string result_string;
        if(s.empty())
        {
            return s;
        }
        for(int i=s.size()-1;i>=0;i--)
        {
            if(s[i]==' ')
            {
                continue;
            }
            int j=i;
            while(j>=0 && s[j]!=' ')
            {
                j--;
            }
            for(int k=j+1;k<=i;k++)
            {
                result_string.push_back(s[k]);
            }
            result_string.push_back(' ');
            i=j;
        }
        if(!result_string.empty())
        {
            result_string.pop_back();
        }
        return result_string;
    }
};
运行结果：
执行用时：
8 ms
, 在所有 C++ 提交中击败了
79.36%
的用户
内存消耗：
7.8 MB
, 在所有 C++ 提交中击败了
84.06%
的用户
